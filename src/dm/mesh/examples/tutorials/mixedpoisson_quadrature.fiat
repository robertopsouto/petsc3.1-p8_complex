import sys, os
sys.path.insert(0, os.path.join(os.getenv('PETSC_DIR'), 'config'))
sys.path.insert(0, os.path.join(os.getenv('PETSC_DIR'), 'config', 'BuildSystem'))
import script

class FEMQuadrature(script.Script):
  def __init__(self):
    import RDict
    script.Script.__init__(self, argDB = RDict.RDict())
    return

  def setupHelp(self, help):
    import nargs
    help.addArgument('FEM', '-element_family=<string>', nargs.Arg(None, 'Lagrange', 'Specify the element family', isTemporary=1))
    help.addArgument('FEM', '-dg_element_family=<string>', nargs.Arg(None, 'DiscontinuousLagrange', 'Specify the dg element family', isTemporary=1))
    help.addArgument('FEM', '-element_order=<int>', nargs.ArgInt(None, 1, 'Specify the element order', isTemporary=1))
    help.addArgument('FEM', '-dg_element_order=<int>', nargs.ArgInt(None, 0, 'Specify the element order', isTemporary=1))
    return

  def setup(self):
    script.Script.setup(self)
    import PETSc.FEM

    self.generator = PETSc.FEM.QuadratureGenerator()
    self.generator.setup()
    return

  def getFamily(self):
    if not hasattr(self, '_family'):
      self._family = self.argDB['element_family']
    return self._family
  def setFamily(self, family):
    self._family = family
    return
  family = property(getFamily, setFamily, doc = 'The element family')

  def getDGFamily(self):
    if not hasattr(self, '_dg_family'):
      self._dg_family = self.argDB['dg_element_family']
    return self._dg_family
  def setDGFamily(self, dg_family):
    self._dg_family = dg_family
    return
  dg_family = property(getDGFamily, setDGFamily, doc = 'The dg element family')

  def getOrder(self):
    if not hasattr(self, '_order'):
      self._order = self.argDB['element_order']
    return self._order
  def setOrder(self, order):
    self._order = order
    return
  order = property(getOrder, setOrder, doc = 'The element order')

  def getDGOrder(self):
    if not hasattr(self, '_dg_order'):
      self._dg_order = self.argDB['dg_element_order']
    return self._dg_order
  def setDGOrder(self, order):
    self._dg_order = dg_order
    return
  dg_order = property(getDGOrder, setDGOrder, doc = 'The DG element order')

  def run(self):
    self.setup()
    import FIAT.shapes

#    femCls = getattr(script.Script.importModule('FIAT.'+self.family), self.family)
    femCls = getattr(script.Script.importModule('FIAT.'+self.family), self.family)
    DGfemCls = getattr(script.Script.importModule('FIAT.'+self.dg_family), self.dg_family)
    print self.dg_family
    self.generator.quadDegree = 2*(self.order+1)+1
    self.generator.run([DGfemCls(FIAT.shapes.LINE, self.dg_order),
                        femCls(FIAT.shapes.LINE, self.order),
                        DGfemCls(FIAT.shapes.TRIANGLE, self.dg_order),
                        femCls(FIAT.shapes.TRIANGLE, self.order),
                        DGfemCls(FIAT.shapes.TETRAHEDRON, self.dg_order),
                        femCls(FIAT.shapes.TETRAHEDRON, self.order)],
                       filename = sys.argv[1])
    return

if __name__ == '__main__':
  FEMQuadrature().run()
