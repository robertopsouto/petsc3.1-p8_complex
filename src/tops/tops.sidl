
package TOPS version 0.0.0 {

  // For passing matrix values from application to solver 
  interface Matrix {
      void   apply(in array<double> x,in array<double> y);
      void   zero();
  }

  interface Solver extends gov.cca.Port {

      // Pass in command line arguments to Solver
      void          Initialize();
      void          solve();

      void          setBlockSize(in int bs);

      array<double> getSolution();
      void          setSolution(in array<double> location);

  }

  // Interfaces inherited by the user to define the algebraic problem 
  package System version 0.0.0 {

    package Initialize version 0.0.0 {
      // Initialize the anything that is fixed for all solves
      interface Once extends gov.cca.Port {
        void   initializeOnce();
      }

      // Initialize anything that changes with each solve
      interface EverySolve extends gov.cca.Port {
        void   initializeEverySolve();
      }
    }

    package Compute version 0.0.0 {
      interface InitialGuess extends gov.cca.Port {
        void   computeInitialGuess(in array<double> x);
      }

      // For nonlinear problems
      interface Jacobian extends gov.cca.Port {
        void   computeJacobian(in array<double> x ,in TOPS.Matrix J,in TOPS.Matrix B);
      }

      interface Residual extends gov.cca.Port {
        void   computeResidual(in array<double> x,in array<double> f);
      }

      // For linear problems
      interface Matrix extends gov.cca.Port {
        void   computeMatrix(in TOPS.Matrix J,in TOPS.Matrix B);
      }

      interface RightHandSide extends gov.cca.Port {
        void   computeRightHandSide(in array<double> b);
      }
    }
  }


  //  ---------- Interfaces/Classes for system on structured grid
  package Structured version 0.0.0 {

    // Sparse matrix interface for a structured grid problem
    // This is modeled after the Babel/SIDL arrays interface
    // essentially one can think of the sparse matrix as having
    // a variable number of doubles at each grid point (while 
    // Babel/SIDL arrays have a fixed number)
    interface Matrix extends TOPS.Matrix, gov.cca.Port {
      // local ownership of grid
      int    getDimen();
      int    getLower(in int dimen);   
      int    getLength(in int dimen);
      
      // set various matrix characteristics
      void   setDimen(in int dim);
      void   setLower(in array<int,3> values);
      void   setLength(in array<int,3> values);
      void   setGhostLower(in array<int,3> values);
      void   setGhostLength(in array<int,3> values);
      void   setMat(in opaque m);
      
      // set a (block) row of nonzeros
      void   set[D1](in int i,in array<double,2> values);
      void   set[D2](in int i,in int j,in array<double,2> values);
      void   set[D3](in int i,in int j,in int k,in array<double,2> values);
      void   set[D4](in int i,in int j,in int k,in int l,in array<double,2> values);
    }
   
    //   The data lives on a structured grid 
    interface Solver extends TOPS.Solver {
      int  dimen();
      int  length(in int a);

      void setDimen(in int dim);
      void setLength(in int a,in int l);
      void setStencilWidth(in int width);
      int  getStencilWidth();
      void setLevels(in int levels);
    }
  }

  class StructuredMatrix implements-all TOPS.Structured.Matrix, gov.cca.Component {}
  class StructuredSolver implements-all TOPS.Structured.Solver, 
                                        gov.cca.Component, 
                                        gov.cca.ports.ParameterGetListener, 
                                        gov.cca.ports.ParameterSetListener {
    gov.cca.Services getServices();
  }

  //  ---------- Interfaces for system on unstructured grid

  package Unstructured version 0.0.0 {

    class Matrix implements-all TOPS.Matrix {
      void   set[Point](in int row,in int column,in array<double> values);
      void   set[Row](in int row,in array<int,1> columns,in array<double> values);
      void   set[Column](in array<int,1> rows,in int column,in array<double> values);
      void   set(in array<int,1> rows,in array<int,1> columns,in array<double> values);
    }

    //   The data in the vectors is from an unstructured problem
    interface Solver extends TOPS.Solver {
      void         setLocalSize(in int m);
      int          getLocalSize();

      void         setGhostPoints(in array<int,1> ghosts);
      array<int,1> getGhostPoints();
      void         setPreallocation(in int d,in int od);
      void         setPreallocation[s](in array<int,1> d,in array<int,1> od);
    }
  }
  class UnstructuredSolver implements-all TOPS.Unstructured.Solver, 
                                          gov.cca.Component, 
                                          gov.cca.ports.ParameterGetListener, 
                                          gov.cca.ports.ParameterSetListener {  
    gov.cca.Services getServices();
  }



}
