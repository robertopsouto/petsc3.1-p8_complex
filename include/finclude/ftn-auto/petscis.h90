        subroutine ISIdentity(is, ident ,ierr)
       IS is ! IS
       PetscTruth ident ! PetscTruth
       integer ierr
       end subroutine
        subroutine ISSetIdentity(is ,ierr)
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISPermutation(is, perm ,ierr)
       IS is ! IS
       PetscTruth perm ! PetscTruth
       integer ierr
       end subroutine
        subroutine ISSetPermutation(is ,ierr)
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISDestroy(is ,ierr)
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISInvertPermutation(is, nlocal, isout ,ierr)
       IS is ! IS
       PetscInt nlocal ! PetscInt
       IS isout ! IS
       integer ierr
       end subroutine
        subroutine ISGetSize(is, size ,ierr)
       IS is ! IS
       PetscInt size ! PetscInt
       integer ierr
       end subroutine
        subroutine ISGetLocalSize(is, size ,ierr)
       IS is ! IS
       PetscInt size ! PetscInt
       integer ierr
       end subroutine
        subroutine ISSort(is ,ierr)
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISSorted(is, flg ,ierr)
       IS is ! IS
       PetscTruth flg ! PetscTruth
       integer ierr
       end subroutine
        subroutine ISDuplicate(is, newIS ,ierr)
       IS is ! IS
       IS newIS ! IS
       integer ierr
       end subroutine
        subroutine ISCopy(is, isy ,ierr)
       IS is ! IS
       IS isy ! IS
       integer ierr
       end subroutine
        subroutine ISCreateGeneral(comm, n, idx, is ,ierr)
       integer comm ! MPI_Comm
       PetscInt n ! PetscInt
       PetscInt idx (*) ! PetscInt
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISCreateBlock(comm, bs, n, idx, is ,ierr)
       integer comm ! MPI_Comm
       PetscInt bs ! PetscInt
       PetscInt n ! PetscInt
       PetscInt idx (*) ! PetscInt
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISBlockGetBlockSize(is, size ,ierr)
       IS is ! IS
       PetscInt size ! PetscInt
       integer ierr
       end subroutine
        subroutine ISBlock(is, flag ,ierr)
       IS is ! IS
       PetscTruth flag ! PetscTruth
       integer ierr
       end subroutine
        subroutine ISBlockGetLocalSize(is, size ,ierr)
       IS is ! IS
       PetscInt size ! PetscInt
       integer ierr
       end subroutine
        subroutine ISBlockGetSize(is, size ,ierr)
       IS is ! IS
       PetscInt size ! PetscInt
       integer ierr
       end subroutine
        subroutine ISStrideGetInfo(is, first, step ,ierr)
       IS is ! IS
       PetscInt first ! PetscInt
       PetscInt step ! PetscInt
       integer ierr
       end subroutine
        subroutine ISStride(is, flag ,ierr)
       IS is ! IS
       PetscTruth flag ! PetscTruth
       integer ierr
       end subroutine
        subroutine ISCreateStride(comm, n, first, step, is ,ierr)
       integer comm ! MPI_Comm
       PetscInt n ! PetscInt
       PetscInt first ! PetscInt
       PetscInt step ! PetscInt
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISDifference(is1, is2, isout ,ierr)
       IS is1 ! IS
       IS is2 ! IS
       IS isout ! IS
       integer ierr
       end subroutine
        subroutine ISSum(is1, is2, is3 ,ierr)
       IS is1 ! IS
       IS is2 ! IS
       IS is3 ! IS
       integer ierr
       end subroutine
        subroutine ISExpand(is1, is2, isout ,ierr)
       IS is1 ! IS
       IS is2 ! IS
       IS isout ! IS
       integer ierr
       end subroutine
        subroutine ISLocalToGlobalMappingCreateIS(is, mapping ,ierr)
       IS is ! IS
       ISLocalToGlobalMapping mapping ! ISLocalToGlobalMapping
       integer ierr
       end subroutine
        subroutine ISLocalToGlobalMappingCreate(cm, n, indices, mapping &
     &,ierr)
       integer cm ! MPI_Comm
       PetscInt n ! PetscInt
       PetscInt indices (*) ! PetscInt
       ISLocalToGlobalMapping mapping ! ISLocalToGlobalMapping
       integer ierr
       end subroutine
        subroutine ISLocalToGlobalMappingBlock(inmap, bs, outmap ,ierr)
       ISLocalToGlobalMapping inmap ! ISLocalToGlobalMapping
       PetscInt bs ! PetscInt
       ISLocalToGlobalMapping outmap ! ISLocalToGlobalMapping
       integer ierr
       end subroutine
        subroutine ISLocalToGlobalMappingDestroy(mapping ,ierr)
       ISLocalToGlobalMapping mapping ! ISLocalToGlobalMapping
       integer ierr
       end subroutine
        subroutine ISLocalToGlobalMappingApplyIS(mapping, is, newis ,   &
     &ierr)
       ISLocalToGlobalMapping mapping ! ISLocalToGlobalMapping
       IS is ! IS
       IS newis ! IS
       integer ierr
       end subroutine
        subroutine ISGlobalToLocalMappingApply(mapping, type, n, idx,   &
     &nout, idxout ,ierr)
       ISLocalToGlobalMapping mapping ! ISLocalToGlobalMapping
       ISGlobalToLocalMappingType type ! ISGlobalToLocalMappingType
       PetscInt n ! PetscInt
       PetscInt idx (*) ! PetscInt
       PetscInt nout ! PetscInt
       PetscInt idxout (*) ! PetscInt
       integer ierr
       end subroutine
        subroutine ISColoringDestroy(iscoloring ,ierr)
       ISColoring iscoloring ! ISColoring
       integer ierr
       end subroutine
        subroutine ISPartitioningToNumbering(part, is ,ierr)
       IS part ! IS
       IS is ! IS
       integer ierr
       end subroutine
        subroutine ISPartitioningCount(part, len, count ,ierr)
       IS part ! IS
       PetscInt len ! PetscInt
       PetscInt count (*) ! PetscInt
       integer ierr
       end subroutine
        subroutine ISAllGather(is, isout ,ierr)
       IS is ! IS
       IS isout ! IS
       integer ierr
       end subroutine
        subroutine ISComplement(is, nmin, nmax, isout ,ierr)
       IS is ! IS
       PetscInt nmin ! PetscInt
       PetscInt nmax ! PetscInt
       IS isout ! IS
       integer ierr
       end subroutine
        subroutine ISEqual(is1, is2, flg ,ierr)
       IS is1 ! IS
       IS is2 ! IS
       PetscTruth flg ! PetscTruth
       integer ierr
       end subroutine
